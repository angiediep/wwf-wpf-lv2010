<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	xmlns:chartingToolkit="clr-namespace:System.Windows.Controls.DataVisualization.Charting;assembly=System.Windows.Controls.DataVisualization.Toolkit"
	xmlns:Custom="http://schemas.microsoft.com/wpf/2008/toolkit"
	x:Class="APPTier.ComparisionStatistics"
	x:Name="UserControl"
	d:DesignWidth="640" d:DesignHeight="480" Width="946" Height="628">

	<UserControl.Resources>
	
		<!-- Simple Label - This template is just a ContentPresenter that shows the content of the Label -->
		<Style x:Key="SimpleLabel" TargetType="{x:Type Label}">
			<Setter Property="HorizontalContentAlignment" Value="Left"/>
			<Setter Property="VerticalContentAlignment" Value="Top"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Label}">
						<Grid>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="false"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- MouseOverBrush is used for MouseOver in Button, Radio Button, CheckBox -->
		<LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#FFF" Offset="0.0"/>
			<GradientStop Color="#AAA" Offset="1.0"/>
		</LinearGradientBrush>
	
		<!-- Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons -->
		<Style x:Key="SimpleRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
			<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
			<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Grid>
							<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
							<ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
		<Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Grid>
							<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
		<Style x:Key="SimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Grid Margin="0,0,0,0" x:Name="Grid">
							<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
							<Trigger Property="IsDragging" Value="True"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton -->
	
		<Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
			<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollBar}">
						<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
							<Grid.RowDefinitions>
								<RowDefinition MaxHeight="18"/>
								<RowDefinition Height="0.00001*"/>
								<RowDefinition MaxHeight="18"/>
							</Grid.RowDefinitions>
						
							<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand">
								<Grid>
									<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
								</Grid>
							</RepeatButton>
						
							<!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
							<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
								<Track.Thumb>
									<Thumb Style="{DynamicResource SimpleThumbStyle}"/>
								</Track.Thumb>
								<Track.IncreaseRepeatButton>
									<RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
								</Track.IncreaseRepeatButton>
								<Track.DecreaseRepeatButton>
									<RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
								</Track.DecreaseRepeatButton>
							</Track>
						
							<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand">
								<Grid>
									<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
								</Grid>
							</RepeatButton>
						</Grid>
					
						<!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
						<ControlTemplate.Triggers>
							<Trigger Property="Orientation" Value="Horizontal">

								<!-- Rotate the ScrollBar from Vertical to Horizontal -->
								<Setter Property="LayoutTransform" TargetName="GridRoot">
									<Setter.Value>
										<RotateTransform Angle="-90"/>
									</Setter.Value>
								</Setter>
							
								<!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
								<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
					
								<!-- Change the commands to do Horizontal commands -->
								<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
								<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
								<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
								<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- Simple ScrollViewer 
	ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar 
	It is used by ListBox, MenuItem, ComboBox, and TreeView -->
		<Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollViewer}">
						<Grid Background="{TemplateBinding Background}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="*"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
						
							<!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
							<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar"  Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
							<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar"  Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- Simple ComboBox 
	This uses the ComboBoxToggleButton to expand and collapse a Popup control
	SimpleScrollViewer to allow items to be scrolled and SimpleComboBoxItem to define the look of each item 
	The Popup shows a list of items in a StackPanel-->
	
		<Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
			<Setter Property="SnapsToDevicePixels" Value="true"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ComboBox}">
						<Grid>
							<!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
							<ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
							<ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
						
							<!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
							<TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>
						
							<!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
							<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
								<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
									<Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
									<ScrollViewer Margin="4,6,4,6" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
							
										<!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
										<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
								
									</ScrollViewer>
								</Grid>
							</Popup>
						</Grid>
						<ControlTemplate.Triggers>						
							<!-- This forces the DropDown to have a minimum size if it is empty -->
							<Trigger Property="HasItems" Value="false">
								<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
							</Trigger>
							<Trigger Property="IsGrouping" Value="true">
								<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
							</Trigger>
							<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
								<Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
								<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
							</Trigger>
							<Trigger Property="IsEditable" Value="true">
								<Setter Property="IsTabStop" Value="false"/>
								<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
								<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- Simple ComboBoxItem - This is used for each item inside of the ComboBox. You can change the selected color of each item below-->
		<Style x:Key="SimpleComboBoxItem" d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
			<Setter Property="SnapsToDevicePixels" Value="true"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ComboBoxItem}">
						<Grid SnapsToDevicePixels="true">
							<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Grid>
						<ControlTemplate.Triggers>
					
							<!-- Change IsHighlighted SelectedBackgroundBrush to set the selection color for the items -->
							<Trigger Property="IsHighlighted" Value="true">
								<Setter Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" TargetName="Border"/>
							</Trigger>
						
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- SimpleButtonFocusVisual is used to show keyboard focus around a SimpleButton control -->
		<Style x:Key="SimpleButtonFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Border>
							<Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- Simple Button - This control sets brushes on each state. Note that these brushes must be listed above since they are static resources -->
		<Style x:Key="SimpleButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
			<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
			<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
			<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
					
						<!-- We use Grid as a root because it is easy to add more elements to customize the button -->
						<Grid x:Name="Grid">
							<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
							<!-- Content Presenter is where the text content etc is placed by the control -->
							<!-- The bindings are useful so that the control can be parameterized without editing the template -->
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
						</Grid>
					
						<!--Each state sets a brush on the Border in the template -->
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
	</UserControl.Resources>

	<Grid x:Name="LayoutRoot">
		<Label x:Name="lblMonth1" HorizontalAlignment="Left" Margin="252.8,43,0,0"  VerticalAlignment="Top" Width="39" Height="21" Content="Tháng:" Foreground="White"/>
		<Label x:Name="lblYear1" HorizontalAlignment="Left" Margin="355.8,43,0,0"  VerticalAlignment="Top" Width="32" Height="21" Content="Năm:" Foreground="White"/>
		<ComboBox x:Name="cbxMonth1" HorizontalAlignment="Left" Margin="291.8,43,0,0"  VerticalAlignment="Top" Width="60" Height="21">
			<ComboBoxItem    Width="52" Height="24" Content="7"/>
		</ComboBox>
		<ComboBox x:Name="cbxYear1" HorizontalAlignment="Left" Margin="387.8,43,0,0"  VerticalAlignment="Top" Width="71" Height="21">
			<ComboBoxItem    Width="63" Height="24" Content="2008"/>
		</ComboBox>
		<Label x:Name="lblFuncName" Margin="377,8,282,0"  VerticalAlignment="Top" Height="22" Content="BẢNG THỐNG KÊ SO SÁNH 2 KÌ THI" FontSize="16" Foreground="White"/>
		<Label x:Name="lblMonth2" HorizontalAlignment="Right" Margin="0,43,266.4,0"  VerticalAlignment="Top" Width="39" Height="21" Content="Tháng:" Foreground="White"/>
		<Label x:Name="lblYear2" HorizontalAlignment="Right" Margin="0,43,170.4,0"  VerticalAlignment="Top" Width="32" Height="21" Content="Năm:" Foreground="White"/>
		<ComboBox x:Name="cbxMonth2" HorizontalAlignment="Right" Margin="0,43,206.4,0"  VerticalAlignment="Top" Width="60" Height="21">
			<ComboBoxItem    Width="52" Height="24" Content="7"/>
		</ComboBox>
		<ComboBox x:Name="cbxYear2" HorizontalAlignment="Right" Margin="0,43,99.4,0"  VerticalAlignment="Top" Width="71" Height="21">
			<ComboBoxItem    Width="63" Height="24" Content="2009"/>
		</ComboBox>
		<Label HorizontalAlignment="Left" Margin="8,88,0,0"  VerticalAlignment="Top" Width="143" Height="21" Content="Số thí sinh đăng kí dự thi:" Foreground="White"/>
		<Label HorizontalAlignment="Left" Margin="8,113,0,0"  VerticalAlignment="Top" Width="90" Height="21" Content="Tổng số bài thi:" Foreground="White"/>
		<Label HorizontalAlignment="Left" Margin="8,138,0,0"  VerticalAlignment="Top" Width="162" Height="21" Content="Tổng số chứng chỉ được cấp:" Foreground="White"/>
		<TextBlock HorizontalAlignment="Left" Margin="8,163,0,0" VerticalAlignment="Top" Width="145" Height="62" TextWrapping="Wrap" Foreground="White"><Run Text="Số thí sinh đăng kí ở các đợt thi trong kì:"/><LineBreak/><Run Text="(Xem dạng                        )"/></TextBlock>
		<ComboBox HorizontalAlignment="Left"  VerticalAlignment="Top" Width="69" Height="18" Margin="67.8,189.4,0,0">
			<ComboBoxItem    Width="61" Height="24" Content="cột"/>
		</ComboBox>
		<Button x:Name="btnApply" HorizontalAlignment="Right" Margin="0,43,363.002,0"   VerticalAlignment="Top" Width="75" Content="Thống kê" Foreground="White" Click="btnApply_Click" Height="21"/>
		<RichTextBox Margin="174,73,409.6,8" Background="{x:Null}" BorderThickness="1" Foreground="White">
			<RichTextBox.BorderBrush>
				<LinearGradientBrush EndPoint="0,20" StartPoint="0,0" MappingMode="Absolute">
					<GradientStop Color="#FFABADB3" Offset="0.05"/>
					<GradientStop Color="#FFE2E3EA" Offset="0.07"/>
					<GradientStop Color="#FF555555" Offset="1"/>
				</LinearGradientBrush>
			</RichTextBox.BorderBrush>
			<FlowDocument/>
		</RichTextBox>
		<RichTextBox Margin="0,73,27.2,8" Background="{x:Null}" BorderThickness="1" Foreground="White" HorizontalAlignment="Right" Width="362.4">
			<RichTextBox.BorderBrush>
				<LinearGradientBrush EndPoint="0,20" StartPoint="0,0" MappingMode="Absolute">
					<GradientStop Color="#FFABADB3" Offset="0.05"/>
					<GradientStop Color="#FFE2E3EA" Offset="0.07"/>
					<GradientStop Color="#FF555555" Offset="1"/>
				</LinearGradientBrush>
			</RichTextBox.BorderBrush>
			<FlowDocument/>
		</RichTextBox>
		
	</Grid>
</UserControl>