<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	xmlns:Custom="http://schemas.microsoft.com/wpf/2008/toolkit"
	x:Class="APPTier.UpdateUser"
	x:Name="UserControl"
	d:DesignWidth="640" d:DesignHeight="480" Width="946" Height="628">

	<UserControl.Resources>
	
		<!-- SimpleButtonFocusVisual is used to show keyboard focus around a SimpleButton control -->
		<Style x:Key="SimpleButtonFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Border>
							<Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
		<!-- MouseOverBrush is used for MouseOver in Button, Radio Button, CheckBox -->
		<LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#FFF" Offset="0.0"/>
			<GradientStop Color="#AAA" Offset="1.0"/>
		</LinearGradientBrush>
	
		<!-- Simple Button - This control sets brushes on each state. Note that these brushes must be listed above since they are static resources -->
		<Style x:Key="SimpleButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
			<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
			<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
			<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
					
						<!-- We use Grid as a root because it is easy to add more elements to customize the button -->
						<Grid x:Name="Grid">
							<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						
							<!-- Content Presenter is where the text content etc is placed by the control -->
							<!-- The bindings are useful so that the control can be parameterized without editing the template -->
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
						</Grid>
					
						<!--Each state sets a brush on the Border in the template -->
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
	</UserControl.Resources>

	<Grid x:Name="LayoutRoot">
		<Border HorizontalAlignment="Right" Margin="0,86,111,164.357" Width="749" BorderBrush="#FF787878" BorderThickness="1" CornerRadius="6">
			<Custom:DataGrid x:Name="dtgvUser" AutoGenerateColumns="True" ItemsSource="{Binding Collection}" Margin="8"/>
		</Border>
		<Button x:Name="btnSave" HorizontalAlignment="Left" Margin="391.6,0,0,101.4"   VerticalAlignment="Bottom" Width="66" Height="25" Content="Lưu" Click="btnSave_Click"/>
		<Button x:Name="btnCancel" Margin="461.6,0,418.4,101.4"   VerticalAlignment="Bottom" Height="25" Content="Hủy" Click="btnCancel_Click"/>
		<TextBlock x:Name="lblFuncName" Margin="342,30,339.8,0" VerticalAlignment="Top" Height="52" FontSize="16" TextWrapping="Wrap" Foreground="White"><Run Text="CẬP NHẬT DANH SÁCH NHÂN VIÊN"/></TextBlock>
	</Grid>
</UserControl>