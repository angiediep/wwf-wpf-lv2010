using System;
using System.Collections.Generic;
using System.Collections;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;

using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data;
using BUSLayer;
using DataLayer.DTO;
using Microsoft.Windows.Controls;
using QuanLyThi;
using QuanLyThi.UserControl;
using System.Text.RegularExpressions;
namespace APPTier
{
    /// <summary>
    /// Interaction logic for UpdateExam.xaml
    /// </summary>
    public partial class UpdateExam : UserControl
    {
        /// <summary>
        /// Danh sách đợt thi được load từ csdl.
        /// </summary>
        List<DtoDotThi> m_lstOriginal = new List<DtoDotThi>();
        /// <summary>
        /// Danh sách đợt thi hiện thời trong datagrid
        /// </summary>
        List<DtoDotThi> m_lstCurrent = new List<DtoDotThi>();
        /// <summary>
        /// Danh sách đợt thi được cập nhật, đang chờ lưu.
        /// </summary>
        List<DtoDotThi> m_lstEdited = new List<DtoDotThi>();
        /// <summary>
        /// Danh sách đợt thi bị xóa. Đang chờ xóa khỏi csdl.
        /// </summary>
        List<DtoDotThi> m_lstDeleted = new List<DtoDotThi>();
        public UpdateExam()
        {
            this.InitializeComponent();
            BusDotThi exams = new BusDotThi();
            m_lstOriginal = exams.getDataList();
            LoadMainData();
        }
        /// <summary>
        /// Load lại toàn bộ dữ liệu đợt thi từ csdl lên datagrid.
        /// </summary>
        public void ReloadData()
        {
            BusDotThi exams = new BusDotThi();
            m_lstOriginal = exams.getDataList();
            m_lstDeleted.Clear();
            m_lstEdited.Clear();
            m_lstCurrent.Clear();
            dtgvExam.Columns.Clear();
            LoadMainData();
            dtgvExam_Loaded(null, null);
        }
        /// <summary>
        /// Thêm dữ liệu phụ vào datagrid. Dữ liệu này bao gồm: số thứ tự, button
        /// xóa cho mỗi dòng.
        /// </summary>
        public void AddExtraData()
        {
            /* 
           * Thêm dữ liệu cho cột thứ tự và cột deleteButton
           */
            for (int i = 0; i < dtgvExam.Items.Count - 1; i++)
            {
                DataGridCell cell = new DataGridCell();
                cell = Utilities.GetCell(dtgvExam, i, 0);
                cell.Content = i + 1;
                cell.VerticalContentAlignment = VerticalAlignment.Center;
                cell.IsEditing = false;

                Button button = new Button();
                button.Content = "Xóa";
                button.Click += new RoutedEventHandler(btnDelete_Click);
                cell = Utilities.GetCell(dtgvExam, i, 5);
                cell.Content = button;
                cell.IsEditing = false;
            }
            DataGridCell endCell = Utilities.GetCell(dtgvExam, dtgvExam.Items.Count - 1, 0);
            endCell.IsEditing = false;
            endCell = Utilities.GetCell(dtgvExam, dtgvExam.Items.Count - 1, 5);
            endCell.IsEditing = false;
            /*
             * Ẩn các cột không cho xem
             */
            dtgvExam.Columns[1].Visibility = Visibility.Hidden; //mã đợt thi
            dtgvExam.Columns[3].Visibility = Visibility.Hidden; //mật khẩu
            dtgvExam.Columns[4].Visibility = Visibility.Hidden; //salt

        }
        /// <summary>
        /// Nạp dữ liệu đợt thi vào datagrid
        /// </summary>
        public void LoadMainData()
        {
            //add cột thứ tự:
            DataGridTextColumn column = new DataGridTextColumn();
            dtgvExam.Columns.Add(column);

            m_lstCurrent.Clear();
            m_lstCurrent = m_lstOriginal.GetRange(0, m_lstOriginal.Count);
            dtgvExam.ItemsSource = m_lstCurrent;
            dtgvExam.AutoGeneratedColumns += new EventHandler(dtgvExam_AutoGeneratedColumns);
            dtgvExam.Loaded += new RoutedEventHandler(dtgvExam_Loaded);
            dtgvExam.RowEditEnding += new EventHandler<DataGridRowEditEndingEventArgs>(dtgvExam_RowEditEnding);
            dtgvExam.CanUserSortColumns = false;
            dtgvExam.CanUserAddRows = true;
            dtgvExam.CanUserDeleteRows = false;
        }

        void dtgvExam_AutoGeneratedColumns(object sender, EventArgs e)
        {
            //Add cột delete button:
            DataGridTextColumn column = new DataGridTextColumn();
            dtgvExam.Columns.Add(column);
            /*
             * Đặt tên column trong datagrid
             */
            dtgvExam.Columns[0].Header = "Số thứ tự";
            dtgvExam.Columns[1].Header = "Mã đợt thi";
            dtgvExam.Columns[2].Header = "Tên đợt thi";
            dtgvExam.Columns[3].Header = "Ngày thi";
            dtgvExam.Columns[4].Header = "Số lượng thí sinh";
            dtgvExam.Columns[5].Header = "Xóa";

            AddExtraData();
        }

        /// <summary>
        /// Được gọi sau khi dữ liệu được load lên datagrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void dtgvExam_Loaded(object sender, RoutedEventArgs e)
        {
            
        }
        /// <summary>
        /// Thực hiện thao tác lưu trữ thông tin các đợt thi mới xuống cơ sở dữ liệu nếu có.
        /// </summary>
        /// <returns>1: thành công, 0: thất bại</returns>
        public int PerformAdding()
        {
            return 0;
        }
        /// <summary>
        /// Thực hiện thao tác xóa thông tin các đợt thi trong hàng đợi khỏi csdl.
        /// </summary>
        public void PerformDeleting()
        {
            
        }
        /// <summary>
        /// Thực hiện thao tác cập nhật thông tin đợt thi vào csdl.
        /// </summary>
        public void PerformUpdating()
        {
            
        }

       
        /// <summary>
        /// Được gọi sau khi edit xong một dòng.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void dtgvExam_RowEditEnding(object sender, DataGridRowEditEndingEventArgs e)
        {
            AddExtraData();
            if (m_lstCurrent.Count == m_lstOriginal.Count)
                m_lstEdited.Add((DtoDotThi)dtgvExam.SelectedItem);

        }
        /// <summary>
        /// Xử lý xóa tạm thời một dòng dữ liệu. Dữ liệu cần xóa sẽ được lưu ra một danh sách.
        /// Khi người dùng lưu hành động xóa thì sẽ xóa thật sự dưới cơ sở dữ liệu.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDelete_Click(object sender, System.Windows.RoutedEventArgs e)
        {

            if (m_lstCurrent.Count <= 0)
                return;

            //Nếu dòng bị delete là dòng được load từ csdl, thì thêm vào hàng đợi xóa.
            if ((m_lstOriginal.Count - m_lstDeleted.Count) > dtgvExam.SelectedIndex)
            {
                DtoDotThi nv = (DtoDotThi)dtgvExam.SelectedItem;
                m_lstDeleted.Add(nv);
            }
            m_lstCurrent.RemoveAt(dtgvExam.SelectedIndex);

            dtgvExam.Items.Refresh();
            AddExtraData();

        }
        /// <summary>
        /// Lưu kết quả thay đổi dữ liệu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSave_Click(object sender, System.Windows.RoutedEventArgs e)
        {
		    MessageBoxResult messageBoxResult = MessageBoxResult.No;
            string strMessage = "";
            if (m_lstEdited.Count > 0)
            {
                strMessage = "Bạn vừa thực hiện một số thao tác cập nhật thông tin đợt thi.\n\r";
                strMessage += "Bạn có chắc chắn lưu những sửa đổi không?";
                messageBoxResult = MessageBox.Show(strMessage, "Nhắc lưu", MessageBoxButton.YesNo);
            }
            if (messageBoxResult == MessageBoxResult.No)
                goto SAVE_CREATING;
            PerformUpdating();
        SAVE_CREATING:
            messageBoxResult = MessageBoxResult.No;
            if (m_lstOriginal.Count < (m_lstCurrent.Count + m_lstDeleted.Count))
            {
                strMessage = "Bạn vừa thực hiện một số thao tác thêm đợt thi mới.\n\r";
                strMessage += "Bạn có chắc chắn muốn lưu những thông tin này không?";
                messageBoxResult = MessageBox.Show(strMessage, "Nhắc lưu", MessageBoxButton.YesNo);
            }
            if (messageBoxResult == MessageBoxResult.No)
                goto SAVE_DELETING;
            if (PerformAdding() == 0)
                return;
        SAVE_DELETING:
            messageBoxResult = MessageBoxResult.No;
            if (m_lstDeleted.Count > 0)
            {
                strMessage = "Bạn vừa thực hiện một số thao tác xóa thông tin đợt thi.\n\r";
                strMessage += "Bạn có chắc chắn xóa vĩnh viễn không?";
                messageBoxResult = MessageBox.Show(strMessage, "Nhắc lưu", MessageBoxButton.YesNo);
            }
            if (messageBoxResult == MessageBoxResult.No)
                goto QUIT;
            PerformDeleting();
        QUIT:
            ReloadData();
            return;
        }
        /// <summary>
        /// Hủy bỏ thao tác thay đổi dữ liệu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnCancel_Click(object sender, System.Windows.RoutedEventArgs e)
        {
            MessageBoxResult messageBoxResult = MessageBoxResult.No;
            if (m_lstEdited.Count > 0 || m_lstDeleted.Count > 0)
            {
                String str = "Bạn vừa thực hiện một số thao tác thay đổi dữ liệu đợt thi.\n\r";
                str += "Bạn có chắc chắn muốn hủy các thao tác này hay không?";
                messageBoxResult = MessageBox.Show(str, "Nhắc lưu", MessageBoxButton.YesNo);
                if (messageBoxResult == MessageBoxResult.No)
                    return;
            }
            m_lstDeleted.Clear();
            m_lstEdited.Clear();
            m_lstCurrent.Clear();

            dtgvExam.Columns.Clear();
            LoadMainData();
            dtgvExam_Loaded(null, null);

        }
	}
}